/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(/*! ./../helpers/btoa */ "./node_modules/axios/lib/helpers/btoa.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if ( true &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");
var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/btoa.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/btoa.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var isBuffer = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "./node_modules/fractional/index.js":
/*!******************************************!*\
  !*** ./node_modules/fractional/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
fraction.js
A Javascript fraction library.

Copyright (c) 2009  Erik Garrison <erik@hypervolu.me>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/


/* Fractions */
/* 
 *
 * Fraction objects are comprised of a numerator and a denomenator.  These
 * values can be accessed at fraction.numerator and fraction.denomenator.
 *
 * Fractions are always returned and stored in lowest-form normalized format.
 * This is accomplished via Fraction.normalize.
 *
 * The following mathematical operations on fractions are supported:
 *
 * Fraction.equals
 * Fraction.add
 * Fraction.subtract
 * Fraction.multiply
 * Fraction.divide
 *
 * These operations accept both numbers and fraction objects.  (Best results
 * are guaranteed when the input is a fraction object.)  They all return a new
 * Fraction object.
 *
 * Usage:
 *
 * TODO
 *
 */

/*
 * The Fraction constructor takes one of:
 *   an explicit numerator (integer) and denominator (integer),
 *   a string representation of the fraction (string),
 *   or a floating-point number (float)
 *
 * These initialization methods are provided for convenience.  Because of
 * rounding issues the best results will be given when the fraction is
 * constructed from an explicit integer numerator and denomenator, and not a
 * decimal number.
 *
 *
 * e.g. new Fraction(1, 2) --> 1/2
 *      new Fraction('1/2') --> 1/2
 *      new Fraction('2 3/4') --> 11/4  (prints as 2 3/4)
 *
 */
Fraction = function(numerator, denominator)
{
    /* double argument invocation */
    if (typeof numerator !== 'undefined' && denominator) {
        if (typeof(numerator) === 'number' && typeof(denominator) === 'number') {
            this.numerator = numerator;
            this.denominator = denominator;
        } else if (typeof(numerator) === 'string' && typeof(denominator) === 'string') {
            // what are they?
            // hmm....
            // assume they are ints?
            this.numerator = parseInt(numerator);
            this.denominator = parseInt(denominator);
        }
    /* single-argument invocation */
    } else if (typeof denominator === 'undefined') {
        num = numerator; // swap variable names for legibility
        if (typeof(num) === 'number') {  // just a straight number init
            this.numerator = num;
            this.denominator = 1;
        } else if (typeof(num) === 'string') {
            var a, b;  // hold the first and second part of the fraction, e.g. a = '1' and b = '2/3' in 1 2/3
                       // or a = '2/3' and b = undefined if we are just passed a single-part number
            var arr = num.split(' ')
            if (arr[0]) a = arr[0]
            if (arr[1]) b = arr[1]
            /* compound fraction e.g. 'A B/C' */
            //  if a is an integer ...
            if (a % 1 === 0 && b && b.match('/')) {
                return (new Fraction(a)).add(new Fraction(b));
            } else if (a && !b) {
                /* simple fraction e.g. 'A/B' */
                if (typeof(a) === 'string' && a.match('/')) {
                    // it's not a whole number... it's actually a fraction without a whole part written
                    var f = a.split('/');
                    this.numerator = f[0]; this.denominator = f[1];
                /* string floating point */
                } else if (typeof(a) === 'string' && a.match('\.')) {
                    return new Fraction(parseFloat(a));
                /* whole number e.g. 'A' */
                } else { // just passed a whole number as a string
                    this.numerator = parseInt(a);
                    this.denominator = 1;
                }
            } else {
                return undefined; // could not parse
            }
        }
    }
    this.normalize();
}


Fraction.prototype.clone = function()
{
    return new Fraction(this.numerator, this.denominator);
}


/* pretty-printer, converts fractions into whole numbers and fractions */
Fraction.prototype.toString = function()
{
    if (this.denominator==='NaN') return 'NaN'
    var wholepart = (this.numerator/this.denominator>0) ?
      Math.floor(this.numerator / this.denominator) :
      Math.ceil(this.numerator / this.denominator)
    var numerator = this.numerator % this.denominator 
    var denominator = this.denominator;
    var result = []; 
    if (wholepart != 0)  
        result.push(wholepart);
    if (numerator != 0)  
        result.push(((wholepart===0) ? numerator : Math.abs(numerator)) + '/' + denominator);
    return result.length > 0 ? result.join(' ') : 0;
}


/* destructively rescale the fraction by some integral factor */
Fraction.prototype.rescale = function(factor)
{
    this.numerator *= factor;
    this.denominator *= factor;
    return this;
}


Fraction.prototype.add = function(b)
{
    var a = this.clone();
    if (b instanceof Fraction) {
        b = b.clone();
    } else {
        b = new Fraction(b);
    }
    td = a.denominator;
    a.rescale(b.denominator);
    b.rescale(td);

    a.numerator += b.numerator;

    return a.normalize();
}


Fraction.prototype.subtract = function(b)
{
    var a = this.clone();
    if (b instanceof Fraction) {
        b = b.clone();  // we scale our argument destructively, so clone
    } else {
        b = new Fraction(b);
    }
    td = a.denominator;
    a.rescale(b.denominator);
    b.rescale(td);

    a.numerator -= b.numerator;

    return a.normalize();
}


Fraction.prototype.multiply = function(b)
{
    var a = this.clone();
    if (b instanceof Fraction)
    {
        a.numerator *= b.numerator;
        a.denominator *= b.denominator;
    } else if (typeof b === 'number') {
        a.numerator *= b;
    } else {
        return a.multiply(new Fraction(b));
    }
    return a.normalize();
}

Fraction.prototype.divide = function(b)
{
    var a = this.clone();
    if (b instanceof Fraction)
    {
        a.numerator *= b.denominator;
        a.denominator *= b.numerator;
    } else if (typeof b === 'number') {
        a.denominator *= b;
    } else {
        return a.divide(new Fraction(b));
    }
    return a.normalize();
}

Fraction.prototype.equals = function(b)
{
    if (!(b instanceof Fraction)) {
        b = new Fraction(b);
    }
    // fractions that are equal should have equal normalized forms
    var a = this.clone().normalize();
    var b = b.clone().normalize();
    return (a.numerator === b.numerator && a.denominator === b.denominator);
}


/* Utility functions */

/* Destructively normalize the fraction to its smallest representation. 
 * e.g. 4/16 -> 1/4, 14/28 -> 1/2, etc.
 * This is called after all math ops.
 */
Fraction.prototype.normalize = (function()
{

    var isFloat = function(n)
    {
        return (typeof(n) === 'number' && 
                ((n > 0 && n % 1 > 0 && n % 1 < 1) || 
                 (n < 0 && n % -1 < 0 && n % -1 > -1))
               );
    }

    var roundToPlaces = function(n, places) 
    {
        if (!places) {
            return Math.round(n);
        } else {
            var scalar = Math.pow(10, places);
            return Math.round(n*scalar)/scalar;
        }
    }
        
    return (function() {

        // XXX hackish.  Is there a better way to address this issue?
        //
        /* first check if we have decimals, and if we do eliminate them
         * multiply by the 10 ^ number of decimal places in the number
         * round the number to nine decimal places
         * to avoid js floating point funnies
         */
        if (isFloat(this.denominator)) {
            var rounded = roundToPlaces(this.denominator, 9);
            var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);
            this.denominator = Math.round(this.denominator * scaleup); // this !!! should be a whole number
            //this.numerator *= scaleup;
            this.numerator *= scaleup;
        } 
        if (isFloat(this.numerator)) {
            var rounded = roundToPlaces(this.numerator, 9);
            var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);
            this.numerator = Math.round(this.numerator * scaleup); // this !!! should be a whole number
            //this.numerator *= scaleup;
            this.denominator *= scaleup;
        }
        var gcf = Fraction.gcf(this.numerator, this.denominator);
        this.numerator /= gcf;
        this.denominator /= gcf;
        if ((this.numerator < 0 && this.denominator < 0) || (this.numerator > 0 && this.denominator < 0)) {
            this.numerator *= -1;
            this.denominator *= -1;
        }
        return this;
    });

})();


/* Takes two numbers and returns their greatest common factor.
 */
Fraction.gcf = function(a, b)
{

    var common_factors = [];
    var fa = Fraction.primeFactors(a);
    var fb = Fraction.primeFactors(b);
    // for each factor in fa
    // if it's also in fb
    // put it into the common factors
    fa.forEach(function (factor) 
    { 
        var i = fb.indexOf(factor);
        if (i >= 0) {
            common_factors.push(factor);
            fb.splice(i,1); // remove from fb
        }
    });

    if (common_factors.length === 0)
        return 1;

    var gcf = (function() {
        var r = common_factors[0];
        var i;
        for (i=1;i<common_factors.length;i++)
        {
            r = r * common_factors[i];
        }
        return r;
    })();

    return gcf;

};


// Adapted from: 
// http://www.btinternet.com/~se16/js/factor.htm
Fraction.primeFactors = function(n) 
{

    var num = Math.abs(n);
    var factors = [];
    var _factor = 2;  // first potential prime factor

    while (_factor * _factor <= num)  // should we keep looking for factors?
    {      
      if (num % _factor === 0)  // this is a factor
        { 
            factors.push(_factor);  // so keep it
            num = num/_factor;  // and divide our search point by it
        }
        else
        {
            _factor++;  // and increment
        }
    }

    if (num != 1)                    // If there is anything left at the end...
    {                                // ...this must be the last prime factor
        factors.push(num);           //    so it too should be recorded
    }

    return factors;                  // Return the prime factors
}

module.exports.Fraction = Fraction


/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/uniqid/index.js":
/*!**************************************!*\
  !*** ./node_modules/uniqid/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/* 
(The MIT License)
Copyright (c) 2014 Halász Ádám <mail@adamhalasz.com>
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

//  Unique Hexatridecimal ID Generator
// ================================================

//  Dependencies
// ================================================
var pid = process && process.pid ? process.pid.toString(36) : '' ;
var address = '';
if(false){ var i, mac, networkInterfaces; } 

//  Exports
// ================================================
module.exports = module.exports.default = function(prefix){ return (prefix || '') + address + pid + now().toString(36); }
module.exports.process = function(prefix){ return (prefix || '') + pid + now().toString(36); }
module.exports.time    = function(prefix){ return (prefix || '') + now().toString(36); }

//  Helpers
// ================================================
function now(){
    var time = Date.now();
    var last = now.last || time;
    return now.last = time > last ? time : last + 1;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_Search__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/Search */ "./src/js/models/Search.js");
/* harmony import */ var _models_Recipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/Recipe */ "./src/js/models/Recipe.js");
/* harmony import */ var _models_Shop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/Shop */ "./src/js/models/Shop.js");
/* harmony import */ var _models_Like__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/Like */ "./src/js/models/Like.js");
/* harmony import */ var _views_searchView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./views/searchView */ "./src/js/views/searchView.js");
/* harmony import */ var _views_recipeView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./views/recipeView */ "./src/js/views/recipeView.js");
/* harmony import */ var _views_shopView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./views/shopView */ "./src/js/views/shopView.js");
/* harmony import */ var _views_likeView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./views/likeView */ "./src/js/views/likeView.js");
/* harmony import */ var _views_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./views/base */ "./src/js/views/base.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }










/* Global state of the app
* - Current recipe object
* - Shopping list object
* - Liked recipes
*/

var state = {};

var controlSearch =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var query;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // 1) get query from view
            query = _views_searchView__WEBPACK_IMPORTED_MODULE_4__["getInput"](); // 2) add new Search object to state;

            state.search = new _models_Search__WEBPACK_IMPORTED_MODULE_0__["default"](query); // 3) Prepare UI for results

            _views_searchView__WEBPACK_IMPORTED_MODULE_4__["clearInput"]();
            _views_searchView__WEBPACK_IMPORTED_MODULE_4__["clearResults"]();
            Object(_views_base__WEBPACK_IMPORTED_MODULE_8__["renderLoader"])(_views_base__WEBPACK_IMPORTED_MODULE_8__["elements"].searchResults);
            _context.next = 7;
            return state.search.getResults();

          case 7:
            Object(_views_base__WEBPACK_IMPORTED_MODULE_8__["clearLoader"])();
            _views_searchView__WEBPACK_IMPORTED_MODULE_4__["renderResults"](state.search.result);
            _views_searchView__WEBPACK_IMPORTED_MODULE_4__["highlightSelected"](state.windowId);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function controlSearch() {
    return _ref.apply(this, arguments);
  };
}();

_views_base__WEBPACK_IMPORTED_MODULE_8__["elements"].searchForm.addEventListener('submit', function (event) {
  event.preventDefault();
  controlSearch();
});
_views_base__WEBPACK_IMPORTED_MODULE_8__["elements"].searchResults.addEventListener('click', function (event) {
  var button = event.target.closest('.btn');

  if (button) {
    var nextPage = +button.dataset.page;
    _views_searchView__WEBPACK_IMPORTED_MODULE_4__["clearResults"]();
    _views_searchView__WEBPACK_IMPORTED_MODULE_4__["renderResults"](state.search.result, nextPage);
  }
});
/*
     Like controller
*/

var controlLike = function controlLike() {
  if (!state.like) state.like = new _models_Like__WEBPACK_IMPORTED_MODULE_3__["default"]();
  var currentId = state.recipe.id;

  if (!state.like.isLiked(currentId)) {
    var newItem = state.like.addLike(state.recipe); // Toggle like button

    _views_likeView__WEBPACK_IMPORTED_MODULE_7__["togglikeBtn"](true); // Toggle remove all recipes button

    _views_likeView__WEBPACK_IMPORTED_MODULE_7__["toggleRemoveBtn"](state.like.getNumLikes());
    _views_likeView__WEBPACK_IMPORTED_MODULE_7__["renderLikedRecipe"](newItem);
  } else {
    // Toggle like button
    _views_likeView__WEBPACK_IMPORTED_MODULE_7__["togglikeBtn"](false); // remove item also from localStorage and from ul list

    state.like.removeLike(currentId); // Toggle remove all recipes button

    _views_likeView__WEBPACK_IMPORTED_MODULE_7__["toggleRemoveBtn"](state.like.getNumLikes());
    _views_likeView__WEBPACK_IMPORTED_MODULE_7__["removeLikedRecipe"](currentId);
  }

  _views_likeView__WEBPACK_IMPORTED_MODULE_7__["toggleLikeMenu"](state.like.getNumLikes());
};

var loadSavedRecipes = function loadSavedRecipes() {
  // Restore liked recipes on page load
  if (!state.like) state.like = new _models_Like__WEBPACK_IMPORTED_MODULE_3__["default"](); // Restore likes

  state.like.getpersistData(); // Toggle like menu

  _views_likeView__WEBPACK_IMPORTED_MODULE_7__["toggleLikeMenu"](state.like.getNumLikes()); // Render existing likes if there are items in it

  if (state.like.getNumLikes() > 0) {
    state.like.likes.forEach(function (like) {
      return _views_likeView__WEBPACK_IMPORTED_MODULE_7__["renderLikedRecipe"](like);
    });
  }

  _views_likeView__WEBPACK_IMPORTED_MODULE_7__["toggleRemoveBtn"](state.like.getNumLikes());
};

_views_base__WEBPACK_IMPORTED_MODULE_8__["elements"].removeRecipeBtn.addEventListener('click', function () {
  _views_likeView__WEBPACK_IMPORTED_MODULE_7__["removeLikedRecipes"]();
  state.like.removeLikedRecipes();
  _views_likeView__WEBPACK_IMPORTED_MODULE_7__["toggleRemoveBtn"](state.like.getNumLikes());
  _views_likeView__WEBPACK_IMPORTED_MODULE_7__["toggleLikeMenu"](state.like.getNumLikes());
  _views_likeView__WEBPACK_IMPORTED_MODULE_7__["togglikeBtn"](state.like.isLiked());
});
/*
    Recipe controller
*/

var controlRecipe =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(event) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            state.windowId = window.location.hash.replace('#', '');

            if (!state.windowId) {
              _context2.next = 26;
              break;
            }

            state.recipe = new _models_Recipe__WEBPACK_IMPORTED_MODULE_1__["default"](state.windowId);
            _context2.prev = 3;
            // Prepare UI for changes
            _views_recipeView__WEBPACK_IMPORTED_MODULE_5__["clearRecipe"]();
            Object(_views_base__WEBPACK_IMPORTED_MODULE_8__["renderLoader"])(_views_base__WEBPACK_IMPORTED_MODULE_8__["elements"].recipeElem); // If we have such recipe in 'liked' list get data out there not from api

            if (!(state.like && state.like.isLiked(state.windowId))) {
              _context2.next = 11;
              break;
            }

            _context2.next = 9;
            return state.recipe.getRecipe(state.like.getLiked(state.windowId));

          case 9:
            _context2.next = 14;
            break;

          case 11:
            _context2.next = 13;
            return state.recipe.getRecipe();

          case 13:
            state.recipe.parseIngredients();

          case 14:
            state.recipe.calcServings();
            state.recipe.calcTime();

            if (event.type === 'load') {
              loadSavedRecipes();
              _views_recipeView__WEBPACK_IMPORTED_MODULE_5__["renderRecipe"](state.recipe, state.like.isLiked(state.windowId)); // Toggle like button

              _views_likeView__WEBPACK_IMPORTED_MODULE_7__["togglikeBtn"](state.like.isLiked(state.windowId));
            } else if (!state.like) {
              _views_recipeView__WEBPACK_IMPORTED_MODULE_5__["renderRecipe"](state.recipe, false);
            } else {
              _views_likeView__WEBPACK_IMPORTED_MODULE_7__["togglikeBtn"](state.like.isLiked(state.windowId));
              _views_recipeView__WEBPACK_IMPORTED_MODULE_5__["renderRecipe"](state.recipe, state.like.isLiked(state.windowId));
            }

            if (state.search || state.like) {
              _views_searchView__WEBPACK_IMPORTED_MODULE_4__["highlightSelected"](state.windowId);
            }

            Object(_views_base__WEBPACK_IMPORTED_MODULE_8__["clearLoader"])();
            _context2.next = 24;
            break;

          case 21:
            _context2.prev = 21;
            _context2.t0 = _context2["catch"](3);
            console.log(_context2.t0);

          case 24:
            _context2.next = 28;
            break;

          case 26:
            loadSavedRecipes();
            console.log(localStorage);

          case 28:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this, [[3, 21]]);
  }));

  return function controlRecipe(_x) {
    return _ref2.apply(this, arguments);
  };
}();

['hashchange', 'load'].forEach(function (elem) {
  return window.addEventListener(elem, function (event) {
    return controlRecipe(event);
  });
});
_views_base__WEBPACK_IMPORTED_MODULE_8__["elements"].shoppingList.addEventListener('click', function (event) {
  var id = event.target.closest(".".concat(_views_base__WEBPACK_IMPORTED_MODULE_8__["elementStrings"].shoppingItem)).dataset.shopid;

  if (event.target.matches('.btn_cross, .btn_cross *')) {
    state.shopList.removeItem(id);
    _views_shopView__WEBPACK_IMPORTED_MODULE_6__["removeItem"](id);
  } else if (event.target.matches(".".concat(_views_base__WEBPACK_IMPORTED_MODULE_8__["elementStrings"].shopItemInput))) {
    var value = parseFloat(event.target.value, 10);
    state.shopList.updateCount(id, value);
  }
});
/*
     List controller
*/

var controlShopList = function controlShopList(recipe) {
  if (!state.shopList) state.shopList = new _models_Shop__WEBPACK_IMPORTED_MODULE_2__["default"]();
  _views_shopView__WEBPACK_IMPORTED_MODULE_6__["clearShopList"]();
  recipe.ingredients.forEach(function (elem) {
    var item = state.shopList.addItem(elem.count, elem.unit, elem.ingredient);
    _views_shopView__WEBPACK_IMPORTED_MODULE_6__["renderShopItems"](item);
  });
};

_views_base__WEBPACK_IMPORTED_MODULE_8__["elements"].recipeElem.addEventListener('click', function (event) {
  var target = event.target;

  if (target.matches('.btn_adjust, .btn_adjust *')) {
    var btn = target.closest('.btn_adjust');

    if (state.recipe.servings > 1 || btn.dataset.type !== 'reduce' && state.recipe.servings === 1) {
      state.recipe.updateServings(btn.dataset.type);
      _views_recipeView__WEBPACK_IMPORTED_MODULE_5__["updateServingsElement"](state.recipe);
      _views_recipeView__WEBPACK_IMPORTED_MODULE_5__["updateIngredientsElement"](state.recipe);
    }
  } else if (target.matches('.btn_shopping, .btn_shopping *')) {
    controlShopList(state.recipe);
  } else if (target.matches('.btn_like, .btn_like *')) {
    controlLike();
  }
});

/***/ }),

/***/ "./src/js/config.js":
/*!**************************!*\
  !*** ./src/js/config.js ***!
  \**************************/
/*! exports provided: proxy, forkApi */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "proxy", function() { return proxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forkApi", function() { return forkApi; });
var proxy = 'https://cors-anywhere.herokuapp.com/';
var forkApi = {
  key: '?key=2a95efc2bb6173de7201f31f9b18a2a9',
  dataPath: 'https://www.food2fork.com/api/',
  get: 'get',
  search: 'search'
}; // https://spoonacular.com/food-api
//  2a95efc2bb6173de7201f31f9b18a2a9
// 34fd73875eea4b22c4d020f02e967e51
// d5d3ea30fd0da7a4d844b4cbcb69cfc0
// 4bb90de87742d0e0ab474e9029ecd05b
// 212.90.191.41:30928
// https://cors-anywhere.herokuapp.com/

/***/ }),

/***/ "./src/js/models/Like.js":
/*!*******************************!*\
  !*** ./src/js/models/Like.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Like; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Like =
/*#__PURE__*/
function () {
  function Like() {
    _classCallCheck(this, Like);

    this.likes = [];
  }

  _createClass(Like, [{
    key: "addLike",
    value: function addLike(recipe) {
      var item = {
        id: recipe.id,
        title: recipe.title,
        publisher: recipe.publisher,
        img: recipe.img,
        ingredients: recipe.ingredients,
        source_url: recipe.source_url
      };
      this.likes.push(item);
      this.persistData();
      return item;
    }
  }, {
    key: "removeLike",
    value: function removeLike(id) {
      var itemIndex = this.likes.findIndex(function (elem) {
        return elem.id === id;
      });
      this.likes.splice(itemIndex, 1);
      this.persistData();
    }
  }, {
    key: "isLiked",
    value: function isLiked(id) {
      // If index !== -1 then recipe is liked (true) if === -1 then recipe is not liked
      return this.likes.findIndex(function (elem) {
        return elem.id === id;
      }) !== -1;
    }
  }, {
    key: "getLiked",
    value: function getLiked(id) {
      var item = this.likes.find(function (elem) {
        return elem.id === id;
      });
      return item;
    }
  }, {
    key: "getNumLikes",
    value: function getNumLikes() {
      return this.likes.length;
    }
  }, {
    key: "persistData",
    value: function persistData() {
      localStorage.setItem('likes', JSON.stringify(this.likes));
    }
  }, {
    key: "getpersistData",
    value: function getpersistData() {
      var storage = JSON.parse(localStorage.getItem('likes'));

      if (storage) {
        this.likes = storage;
      }
    }
  }, {
    key: "removeLikedRecipes",
    value: function removeLikedRecipes() {
      this.likes = [];
      localStorage.removeItem('likes');
    }
  }]);

  return Like;
}();


;

/***/ }),

/***/ "./src/js/models/Recipe.js":
/*!*********************************!*\
  !*** ./src/js/models/Recipe.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Recipe; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/js/config.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Recipe =
/*#__PURE__*/
function () {
  function Recipe(id) {
    _classCallCheck(this, Recipe);

    this.id = id; // this.defaultServings = 4;
    // this.servings = this.defaultServings;
  }

  _createClass(Recipe, [{
    key: "getRecipe",
    value: function () {
      var _getRecipe = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(recipe) {
        var result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (recipe) {
                  _context.next = 18;
                  break;
                }

                _context.prev = 1;
                _context.next = 4;
                return axios__WEBPACK_IMPORTED_MODULE_0___default()("".concat(_config__WEBPACK_IMPORTED_MODULE_1__["forkApi"].dataPath).concat(_config__WEBPACK_IMPORTED_MODULE_1__["forkApi"].get).concat(_config__WEBPACK_IMPORTED_MODULE_1__["forkApi"].key, "&rId=").concat(this.id));

              case 4:
                result = _context.sent;
                console.log(result);
                this.img = result.data.recipe.image_url;
                this.ingredients = result.data.recipe.ingredients;
                this.publisher = result.data.recipe.publisher;
                this.title = result.data.recipe.title;
                this.source_url = result.data.recipe.source_url;
                _context.next = 16;
                break;

              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](1);
                console.log('Something wrong... =(');

              case 16:
                _context.next = 23;
                break;

              case 18:
                this.img = recipe.img;
                this.ingredients = recipe.ingredients;
                this.publisher = recipe.publisher;
                this.title = recipe.title;
                this.source_url = recipe.source_url;

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 13]]);
      }));

      function getRecipe(_x) {
        return _getRecipe.apply(this, arguments);
      }

      return getRecipe;
    }()
  }, {
    key: "calcTime",
    value: function calcTime() {
      // 15 min for each 3 ingredients
      var numIngr = this.ingredients.length;
      var periods = numIngr / 3;
      this.time = periods * 15;
    }
  }, {
    key: "calcServings",
    value: function calcServings() {
      this.servings = 4;
    }
  }, {
    key: "updateServings",
    value: function updateServings(type) {
      var _this = this;

      var newServings = type === 'add' ? this.servings + 1 : this.servings - 1;
      this.ingredients.forEach(function (elem) {
        elem.count *= newServings / _this.servings;
      });
      this.servings = newServings;
    }
  }, {
    key: "parseIngredients",
    value: function parseIngredients() {
      var unitsLong = ['tablespoons', 'tablespoon', 'cups', 'ounces', 'ounce', 'teaspoons', 'teaspoon', 'pounds'];
      var unitsShort = ['tbsp', 'tbsp', 'cup', 'oc', 'oc', 'tsp', 'tsp', 'pound'];
      var units = [].concat(unitsShort, ['kg', 'g']); // Set the new array of ingredients

      var newIngredients = this.ingredients.map(function (elem) {
        // 1) Uniform units
        var ingredient = elem.toLowerCase();
        unitsLong.forEach(function (unit, i) {
          ingredient = ingredient.replace(unit, unitsShort[i]);
        }); // 2) Remove parenthesis and clear whitespaces

        ingredient = ingredient.replace(/ *\([^)]*\) */g, ' ').trim(); // 2.1) Remove "-" symbols from

        ingredient = ingredient.replace('-', ' '); // 3) Parse ingredients into count, unit and ingredient

        var arrIng = ingredient.split(' '); // Get index of ingredient unit

        var unitIndex = arrIng.findIndex(function (elem) {
          return units.includes(elem);
        });
        var ingrObj;

        if (unitIndex > -1) {
          // If unit is defined there is a count too
          var arrCount = arrIng.slice(0, unitIndex);

          if (arrCount.length !== 0) {
            // If count defined as fraction or as fraction and integer (Ex. 1 1/2 'unit')
            arrCount = arrCount.map(function (el) {
              if (el.includes('/')) {
                var fraction = el.split('/');
                var numerator = parseInt(fraction[0], 10);
                var denumerator = parseInt(fraction[1], 10);
                var decimal = parseFloat((numerator / denumerator).toFixed(2));
                return decimal;
              }

              return parseInt(el, 10);
            });
            var count = arrCount.reduce(function (acc, curr) {
              return acc + curr;
            }, 0);
            ingrObj = {
              count: count,
              unit: arrIng[unitIndex],
              ingredient: arrIng.slice(unitIndex + 1).join(' ')
            };
          } else {
            // If unit is defined but count is not
            ingrObj = {
              count: 1,
              unit: arrIng[unitIndex],
              ingredient: arrIng.slice(unitIndex + 1).join(' ')
            };
          }
        } else if (parseInt(arrIng[0], 10)) {
          //  If unit is not defined there might be a count
          ingrObj = {
            count: parseInt(arrIng[0], 10),
            unit: '',
            ingredient: arrIng.slice(1).join(' ')
          };
        } else if (unitIndex === -1) {
          ingrObj = {
            count: 1,
            unit: '',
            ingredient: ingredient
          };
        }

        return ingrObj;
      });
      this.ingredients = newIngredients;
    }
  }]);

  return Recipe;
}();



/***/ }),

/***/ "./src/js/models/Search.js":
/*!*********************************!*\
  !*** ./src/js/models/Search.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Search; });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/js/config.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Search =
/*#__PURE__*/
function () {
  function Search(query) {
    _classCallCheck(this, Search);

    this.query = query;
  }

  _createClass(Search, [{
    key: "getResults",
    value: function () {
      var _getResults = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var res;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_0___default()("".concat(_config__WEBPACK_IMPORTED_MODULE_1__["forkApi"].dataPath).concat(_config__WEBPACK_IMPORTED_MODULE_1__["forkApi"].search).concat(_config__WEBPACK_IMPORTED_MODULE_1__["forkApi"].key, "&q=").concat(this.query));

              case 3:
                res = _context.sent;
                this.result = res.data.recipes;
                console.log(res);
                _context.next = 11;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                console.log(_context.t0);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 8]]);
      }));

      function getResults() {
        return _getResults.apply(this, arguments);
      }

      return getResults;
    }()
  }]);

  return Search;
}();



/***/ }),

/***/ "./src/js/models/Shop.js":
/*!*******************************!*\
  !*** ./src/js/models/Shop.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Shop; });
/* harmony import */ var uniqid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uniqid */ "./node_modules/uniqid/index.js");
/* harmony import */ var uniqid__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uniqid__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var Shop =
/*#__PURE__*/
function () {
  function Shop() {
    _classCallCheck(this, Shop);

    this.items = [];
  }

  _createClass(Shop, [{
    key: "addItem",
    value: function addItem(count, unit, ingredient) {
      var item = {
        id: uniqid__WEBPACK_IMPORTED_MODULE_0___default()(),
        count: count,
        unit: unit,
        ingredient: ingredient
      };
      this.items.push(item);
      return item;
    }
  }, {
    key: "removeItem",
    value: function removeItem(id) {
      // Get index of item
      var itemIndex = this.items.findIndex(function (elem) {
        return elem.id === id;
      }); // Remove item

      this.items.splice(itemIndex, 1);
    }
  }, {
    key: "updateCount",
    value: function updateCount(id, newCount) {
      this.items.find(function (elem) {
        return elem.id === id;
      }).count = newCount; // this.items[itemIndex].count = newCount;
    }
  }]);

  return Shop;
}();


;

/***/ }),

/***/ "./src/js/views/base.js":
/*!******************************!*\
  !*** ./src/js/views/base.js ***!
  \******************************/
/*! exports provided: elements, elementStrings, renderLoader, clearLoader, limitRecipeTitle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elements", function() { return elements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementStrings", function() { return elementStrings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderLoader", function() { return renderLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearLoader", function() { return clearLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "limitRecipeTitle", function() { return limitRecipeTitle; });
var elements = {
  searchForm: document.querySelector('.search'),
  searchInput: document.querySelector('.search_input'),
  searchResList: document.querySelector('.results_list'),
  forkifyList: document.querySelector('.forkify_list'),
  searchResults: document.querySelector('.results'),
  resultsPages: document.querySelector('.results_pages'),
  recipeElem: document.querySelector('.recipe'),
  recipeCount: document.querySelector('.recipe_count'),
  shoppingList: document.querySelector('.shopping_list'),
  likePannel: document.querySelector('.likes'),
  likesList: document.querySelector('.likes_list'),
  removeRecipeBtn: document.querySelector('.btn_remove')
};
var elementStrings = {
  loader: 'loader',
  hide: 'hide',
  activeRecipe: 'forkify_link-active',
  forkListItem: 'forkify_list_item',
  nextPagbtn: {
    btnClass: 'results_btn-next',
    svgIcon: 'icon-triangle-right'
  },
  prevPagbtn: {
    btnClass: 'results_btn-prev',
    svgIcon: 'icon-triangle-left'
  },
  forkifyList: 'forkify_list',
  forkifyLink: 'forkify_link',
  recipeCount: 'recipe_count',
  recipeServings: 'recipe_serving_count',
  shoppingItem: 'shopping_item',
  shopItemInput: 'ingredient_data_amount',
  btnRecipeLike: 'btn_like',
  likedRecipe: 'likes_item',
  iconHeart: 'icon-heart',
  iconHeartOutline: 'icon-heart-outlined'
};
var renderLoader = function renderLoader(parent) {
  var loader = "\n        <div class=\"".concat(elementStrings.loader, "\">\n            <svg class=\"icon icon-cw\">\n                <use xlink:href=\"img/sprite.svg#icon-cw\"/>\n            </svg>\n        </div>\n    ");
  parent.insertAdjacentHTML('afterbegin', loader);
};
var clearLoader = function clearLoader() {
  var loader = document.querySelector(".".concat(elementStrings.loader));

  if (loader) {
    loader.parentElement.removeChild(loader);
  }
}; // Past with pomodoro and spinach

var limitRecipeTitle = function limitRecipeTitle(title) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 17;
  var newTitle = [];

  if (title.length > limit) {
    title.split(' ').reduce(function (acc, curr) {
      if (acc + curr.length <= limit) {
        newTitle.push(curr);
      }

      return acc + curr.length;
    }, 0);
    return "".concat(newTitle.join(' '), " ...");
  }

  return title;
};

/***/ }),

/***/ "./src/js/views/likeView.js":
/*!**********************************!*\
  !*** ./src/js/views/likeView.js ***!
  \**********************************/
/*! exports provided: removeLikedRecipes, togglikeBtn, toggleLikeMenu, renderLikedRecipe, removeLikedRecipe, toggleRemoveBtn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeLikedRecipes", function() { return removeLikedRecipes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "togglikeBtn", function() { return togglikeBtn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleLikeMenu", function() { return toggleLikeMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderLikedRecipe", function() { return renderLikedRecipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeLikedRecipe", function() { return removeLikedRecipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleRemoveBtn", function() { return toggleRemoveBtn; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/js/views/base.js");

var removeLikedRecipes = function removeLikedRecipes() {
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].likesList.innerHTML = '';
};
var togglikeBtn = function togglikeBtn(isLiked) {
  var likeBtnString = isLiked ? _base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].iconHeart : _base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].iconHeartOutline;
  var svg = document.querySelector(".".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].btnRecipeLike, " svg"));

  if (svg) {
    svg.classList.toggle("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].iconHeart));
    svg.classList.toggle("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].iconHeartOutline));
    document.querySelector(".".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].btnRecipeLike, " use")).setAttribute('xlink:href', "img/sprite.svg#".concat(likeBtnString));
  }
};
var toggleLikeMenu = function toggleLikeMenu(numLikes) {
  numLikes > 0 ? _base__WEBPACK_IMPORTED_MODULE_0__["elements"].likePannel.classList.remove("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].hide)) : _base__WEBPACK_IMPORTED_MODULE_0__["elements"].likePannel.classList.add("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].hide));
};
var renderLikedRecipe = function renderLikedRecipe(recipe) {
  var markup = "\n        <li class=\"forkify_list_item likes_item\">\n            <a class=\"forkify_link likes_link\" href=\"#".concat(recipe.id, "\" data-likeid=\"").concat(recipe.id, "\">\n                <figure class=\"forkify_fig likes_fig\">\n                    <img src=\"").concat(recipe.img, "\" alt=\"Test\"/>\n                </figure>\n                <div class=\"forkify_data likes_data\">\n                    <h4 class=\"forkify_name likes_name\" title=\"").concat(recipe.title, "\">").concat(Object(_base__WEBPACK_IMPORTED_MODULE_0__["limitRecipeTitle"])(recipe.title), "</h4>\n                    <p class=\"forkify_author likes_author\">").concat(recipe.publisher, "</p>\n                </div>\n            </a>\n        </li>");
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].likesList.insertAdjacentHTML('beforeend', markup);
}; // remove by ID

var removeLikedRecipe = function removeLikedRecipe(id) {
  var item = document.querySelector(".".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elements"].likesList, " a[data-likeid=\"").concat(id, "\"]"));

  if (item) {
    item.parentElement.removeChild(item);
  }
};
var toggleRemoveBtn = function toggleRemoveBtn(numLikes) {
  numLikes > 0 ? _base__WEBPACK_IMPORTED_MODULE_0__["elements"].removeRecipeBtn.classList.remove("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].hide)) : _base__WEBPACK_IMPORTED_MODULE_0__["elements"].removeRecipeBtn.classList.add("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].hide));
};

/***/ }),

/***/ "./src/js/views/recipeView.js":
/*!************************************!*\
  !*** ./src/js/views/recipeView.js ***!
  \************************************/
/*! exports provided: clearRecipe, renderRecipe, updateServingsElement, updateIngredientsElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearRecipe", function() { return clearRecipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderRecipe", function() { return renderRecipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateServingsElement", function() { return updateServingsElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateIngredientsElement", function() { return updateIngredientsElement; });
/* harmony import */ var fractional__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fractional */ "./node_modules/fractional/index.js");
/* harmony import */ var fractional__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fractional__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/js/views/base.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



var clearRecipe = function clearRecipe() {
  _base__WEBPACK_IMPORTED_MODULE_1__["elements"].recipeElem.innerHTML = '';
};

var convertFraction = function convertFraction(count) {
  if (count) {
    var _count$toString$split = count.toString().split('.').map(function (elem) {
      return parseInt(elem, 10);
    }),
        _count$toString$split2 = _slicedToArray(_count$toString$split, 2),
        int = _count$toString$split2[0],
        dec = _count$toString$split2[1];

    if (!dec) {
      return count;
    }

    if (int === 0) {
      var fr = new fractional__WEBPACK_IMPORTED_MODULE_0__["Fraction"](count);
      return "".concat(fr.numerator, "/").concat(fr.denominator);
    } else {
      var _fr = new fractional__WEBPACK_IMPORTED_MODULE_0__["Fraction"](count - int);

      return "".concat(int, " ").concat(_fr.numerator, "/").concat(_fr.denominator);
    }
  }

  return '?';
};

var createRecipeFigure = function createRecipeFigure(recipe) {
  return "<figure class=\"recipe_view\">\n                <img src=\"".concat(recipe.img, "\" alt=\"").concat(recipe.title, "\">\n                <h2 class=\"recipe_title skewed\"><span class=\"grad-orange\">").concat(recipe.title, "</span></h2>\n            </figure>\n            ");
};

var createRecipeDetails = function createRecipeDetails(recipe, isLiked) {
  return "<div class=\"recipe_details\">\n                <div class=\"recipe_info recipe_time\">\n                    <svg class=\"icon icon-stopwatch\">\n                        <use xlink:href=\"img/sprite.svg#icon-stopwatch\"/>\n                    </svg>\n                    <span class=\"recipe_info_data recipe_time_minutes\">".concat(recipe.time, "</span>\n                    <span class=\"recipe_time_text\">minutes</span>\n                </div>\n                <div class=\"recipe_info recipe_serving\">\n                    <svg class=\"icon icon-man\">\n                        <use xlink:href=\"img/sprite.svg#icon-man\"/>\n                    </svg>\n                    <span class=\"recipe_info_data recipe_serving_count\">").concat(recipe.servings, "</span>\n                    <span class=\"recipe_serving_text\">serving</span>\n                    <div class=\"recipe_serving_buttons\">\n                        <button class=\"btn_adjust btn_inline\" data-type=\"reduce\">\n                            <svg class=\"icon icon-circle-minus\">\n                                <use xlink:href=\"img/sprite.svg#icon-circle-minus\"/>\n                            </svg>\n                        </button>\n                        <button class=\"btn_adjust btn_inline\" data-type=\"add\">\n                            <svg class=\"icon icon-circle-plus\">\n                                <use xlink:href=\"img/sprite.svg#icon-circle-plus\"/>\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n                <button class=\"btn btn_like btn_inline grad-orange scaled\">\n                    <svg class=\"icon ").concat(isLiked ? _base__WEBPACK_IMPORTED_MODULE_1__["elementStrings"].iconHeart : _base__WEBPACK_IMPORTED_MODULE_1__["elementStrings"].iconHeartOutline, "\">\n                        <use xlink:href=\"img/sprite.svg#").concat(isLiked ? _base__WEBPACK_IMPORTED_MODULE_1__["elementStrings"].iconHeart : _base__WEBPACK_IMPORTED_MODULE_1__["elementStrings"].iconHeartOutline, "\"/>\n                    </svg>\n                </button>\n            </div>\n            ");
};

var createRecipeDirections = function createRecipeDirections(recipe) {
  return "<!-- BEGIN recipe_directions -->\n    <div class=\"recipe_directions\">\n        <h3 class=\"recipe_directions_title\">how to cook it</h3>\n        <p class=\"recipe_directions_text\">This recipe was carefully designed and tested\n            by <span class=\"recipe_author\">".concat(recipe.publisher, "</span>.\n        </p>\n        <a href=\"").concat(recipe.source_url, "\" class=\"btn btn_directions grad-orange scaled\">\n            <span class=\"button_directions_text\">directions</span>\n            <svg class=\"icon icon-search\">\n                <use xlink:href=\"img/sprite.svg#icon-search\"/>\n            </svg>\n        </a>\n    </div>\n    <!-- END recipe_directions -->\n    ");
};

var createRecipeItems = function createRecipeItems(recipe) {
  var ingredient = '';
  recipe.ingredients.forEach(function (elem) {
    ingredient += "\n        <li class=\"recipe_ingredients_item\">\n            <svg class=\"icon icon-check\">\n                <use xlink:href=\"img/sprite.svg#icon-check\"/>\n            </svg>\n            <div class=\"recipe_ingredient\">\n                <span class=\"recipe_count\">".concat(convertFraction(elem.count), "</span>\n                <span class=\"recipe_ingredient_unit\">").concat(elem.unit, "</span>\n                <span class=\"recipe_ingredient_name\">").concat(elem.ingredient, "</span>\n            </div>\n        </li>\n        ");
  });
  return ingredient;
};

var renderRecipe = function renderRecipe(recipe, isLiked) {
  var markup = "\n        <!-- BEGIN recipe -->\n        <div class=\"recipe bg-gray\">\n            ".concat(createRecipeFigure(recipe), "\n            ").concat(createRecipeDetails(recipe, isLiked), "\n            <!-- BEGIN recipe_ingredients -->\n            <div class=\"recipe_ingredients\">\n                <ul class=\"recipe_ingredients_list\">\n                ").concat(createRecipeItems(recipe), "\n                </ul>\n                <button class=\"btn btn_shopping grad-orange scaled\">\n                    <svg class=\"icon icon-shopping-cart\">\n                        <use xlink:href=\"img/sprite.svg#icon-shopping-cart\"/>\n                    </svg>\n                    <span>add to shopping list</span>\n                </button>\n            </div>\n            <!-- END recipe_ingredients -->\n            ").concat(createRecipeDirections(recipe), "\n        </div>\n        <!-- END recipe -->\n        ");
  _base__WEBPACK_IMPORTED_MODULE_1__["elements"].recipeElem.insertAdjacentHTML('afterbegin', markup);
};
var updateServingsElement = function updateServingsElement(recipe) {
  var servings = document.querySelector(".".concat(_base__WEBPACK_IMPORTED_MODULE_1__["elementStrings"].recipeServings));

  if (servings) {
    servings.textContent = "".concat(recipe.servings);
  }
};
var updateIngredientsElement = function updateIngredientsElement(recipe) {
  var ingredients = Array.from(document.querySelectorAll(".".concat(_base__WEBPACK_IMPORTED_MODULE_1__["elementStrings"].recipeCount)));

  if (ingredients) {
    ingredients.forEach(function (elem, i) {
      elem.textContent = "".concat(convertFraction(recipe.ingredients[i].count));
    });
  }
};

/***/ }),

/***/ "./src/js/views/searchView.js":
/*!************************************!*\
  !*** ./src/js/views/searchView.js ***!
  \************************************/
/*! exports provided: getInput, clearInput, clearResults, highlightSelected, renderResults */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getInput", function() { return getInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearInput", function() { return clearInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearResults", function() { return clearResults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "highlightSelected", function() { return highlightSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderResults", function() { return renderResults; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/js/views/base.js");

var getInput = function getInput() {
  return _base__WEBPACK_IMPORTED_MODULE_0__["elements"].searchInput.value;
};
var clearInput = function clearInput() {
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].searchInput.value = '';
};
var clearResults = function clearResults() {
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].searchResList.innerHTML = '';
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].resultsPages.innerHTML = '';
};
var highlightSelected = function highlightSelected(id) {
  // Get all recipes links (result and likes)
  var resultsArr = Array.from(document.querySelectorAll(".".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].forkifyLink))); // Get active links (result and likes)

  var active = Array.from(document.querySelectorAll(".".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].forkifyLink, "[href*=\"").concat(id, "\"]"))); // Remove active class from all links

  resultsArr.forEach(function (elem) {
    return elem.classList.remove("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].activeRecipe));
  }); // Set remove class to active links (result and likes)

  active.forEach(function (elem) {
    return elem.classList.add("".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].activeRecipe));
  }); // document.querySelector(`.results__link[href*="${id}"]`).classList.add('results__link--active');
  // const resultArr = Array.from(document.querySelectorAll(`.${elementStrings.forkifyLink}`));
  // resultArr.forEach(elem => elem.classList.remove(`${elementStrings.activeRecipe}`));
  // active.classList.add(`${elementStrings.activeRecipe}`);
};

var renderRecipe = function renderRecipe(recipe) {
  var markup = "\n    <li class=\"forkify_list_item\">\n        <a class=\"forkify_link\" href=\"#".concat(recipe.recipe_id, "\" data-id=\"").concat(recipe.recipe_id, "\">\n            <figure class=\"forkify_fig\">\n                <img src=").concat(recipe.image_url, " alt=\"").concat(recipe.title, "\">\n            </figure>\n            <div class=\"forkify_data\">\n                <h4 class=\"forkify_name\" title=\"").concat(recipe.title, "\">").concat(Object(_base__WEBPACK_IMPORTED_MODULE_0__["limitRecipeTitle"])(recipe.title), "</h4>\n                <p class=\"forkify_author\" title=\"").concat(recipe.publisher, "\">").concat(recipe.publisher, "</p>\n            </div>\n        </a>\n    </li>\n    ");
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].searchResList.insertAdjacentHTML('beforeend', markup);
};

var createPaginBtn = function createPaginBtn(page, type) {
  return "\n    <button class=\"btn btn_pagination btn_inline bg-gray btn-round ".concat(type.btnClass, "\" data-page=\"").concat(page, "\">\n        <span class=\"btn_text\">Page ").concat(page, "</span>\n        <svg class=\"icon ").concat(type.svgIcon, "\">\n            <use href=\"img/sprite.svg#").concat(type.svgIcon, "\"></use>\n        </svg>\n    </button>\n    ");
};

var createPaginAmount = function createPaginAmount(currentPage, perPage, total) {
  return "\n    <div class=\"results_pages_amout bg-gray\">\n        <span class=\"results_pages_current\">".concat(currentPage * perPage, "</span>\n        <span class=\"results_pages_separator\">/</span>\n        <span class=\"results_pages_total\">").concat(total, "</span>\n    </div>");
};

var renderButtons = function renderButtons(page, recipesAmount, resPerPage) {
  var totalPages = Math.ceil(recipesAmount / resPerPage);
  var button; // Decide which button should be render in order of current page

  if (totalPages >= 1) {
    // Render only next button;
    if (page === 1) {
      button = "\n                ".concat(createPaginBtn(page + 1, _base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].nextPagbtn), "\n                ").concat(createPaginAmount(page, resPerPage, recipesAmount), "\n            ");
    } else if (page > 1 && page < totalPages) {
      // fix this
      button = "\n                ".concat(createPaginBtn(page - 1, _base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].prevPagbtn), "\n                ").concat(createPaginBtn(page + 1, _base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].nextPagbtn), "\n                ").concat(createPaginAmount(page, resPerPage, recipesAmount), "\n            ");
    } else if (page === totalPages) {
      button = "\n                ".concat(createPaginBtn(page - 1, _base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].prevPagbtn), "\n                ").concat(createPaginAmount(page, resPerPage, recipesAmount), "\n            ");
    }
  }

  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].resultsPages.insertAdjacentHTML('beforeend', button);
};

var renderResults = function renderResults(recipes) {
  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var resPerPage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
  var start = (page - 1) * resPerPage;
  var end = page * resPerPage;
  recipes.slice(start, end).forEach(renderRecipe);
  renderButtons(page, recipes.length, resPerPage);
};

/***/ }),

/***/ "./src/js/views/shopView.js":
/*!**********************************!*\
  !*** ./src/js/views/shopView.js ***!
  \**********************************/
/*! exports provided: clearShopList, renderShopItems, removeItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearShopList", function() { return clearShopList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderShopItems", function() { return renderShopItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeItem", function() { return removeItem; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/js/views/base.js");

var clearShopList = function clearShopList() {
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].shoppingList.innerHTML = '';
};
var renderShopItems = function renderShopItems(ingredient) {
  var markup = "\n        <li class=\"".concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].shoppingItem, "\" data-shopid=\"").concat(ingredient.id, "\">\n            <div class=\"ingredient_data\">\n                <input type=\"number\" class=\"").concat(_base__WEBPACK_IMPORTED_MODULE_0__["elementStrings"].shopItemInput, "\" min=\"0\" value=\"").concat(ingredient.count, "\" step=\"").concat(ingredient.count, "\" placeholder=\"0\">\n                ").concat(ingredient.unit ? "<span class=\"ingredient_data_unit\">".concat(ingredient.unit, "</span>") : '', "\n            </div>\n            <p class=\"shopping_descr\">\n                ").concat(ingredient.ingredient, "\n            </p>\n            <button class=\"btn btn_cross btn_inline\">\n                <svg class=\"icon icon-circle-cross\">\n                    <use xlink:href=\"img/sprite.svg#icon-circle-cross\"/>\n                </svg>\n            </button>\n        </li>");
  _base__WEBPACK_IMPORTED_MODULE_0__["elements"].shoppingList.insertAdjacentHTML('beforeend', markup);
};
var removeItem = function removeItem(id) {
  var item = document.querySelector("[data-shopid=".concat(id, "]"));

  if (item) {
    item.parentElement.removeChild(item);
  }
};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf8;base64,
