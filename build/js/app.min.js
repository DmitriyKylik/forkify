!function(n){var r={};function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=n,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s="./src/js/app.js")}({"./node_modules/axios/index.js":function(e,t,n){e.exports=n("./node_modules/axios/lib/axios.js")},"./node_modules/axios/lib/adapters/xhr.js":function(e,t,d){"use strict";var p=d("./node_modules/axios/lib/utils.js"),h=d("./node_modules/axios/lib/core/settle.js"),m=d("./node_modules/axios/lib/helpers/buildURL.js"),b=d("./node_modules/axios/lib/helpers/parseHeaders.js"),x=d("./node_modules/axios/lib/helpers/isURLSameOrigin.js"),v=d("./node_modules/axios/lib/core/createError.js"),j="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||d("./node_modules/axios/lib/helpers/btoa.js");e.exports=function(f){return new Promise(function(n,r){var o=f.data,s=f.headers;p.isFormData(o)&&delete s["Content-Type"];var i=new XMLHttpRequest,e="onreadystatechange",a=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in i||x(f.url)||(i=new window.XDomainRequest,e="onload",a=!0,i.onprogress=function(){},i.ontimeout=function(){}),f.auth){var t=f.auth.username||"",u=f.auth.password||"";s.Authorization="Basic "+j(t+":"+u)}if(i.open(f.method.toUpperCase(),m(f.url,f.params,f.paramsSerializer),!0),i.timeout=f.timeout,i[e]=function(){if(i&&(4===i.readyState||a)&&(0!==i.status||i.responseURL&&0===i.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in i?b(i.getAllResponseHeaders()):null,t={data:f.responseType&&"text"!==f.responseType?i.response:i.responseText,status:1223===i.status?204:i.status,statusText:1223===i.status?"No Content":i.statusText,headers:e,config:f,request:i};h(n,r,t),i=null}},i.onerror=function(){r(v("Network Error",f,null,i)),i=null},i.ontimeout=function(){r(v("timeout of "+f.timeout+"ms exceeded",f,"ECONNABORTED",i)),i=null},p.isStandardBrowserEnv()){var c=d("./node_modules/axios/lib/helpers/cookies.js"),l=(f.withCredentials||x(f.url))&&f.xsrfCookieName?c.read(f.xsrfCookieName):void 0;l&&(s[f.xsrfHeaderName]=l)}if("setRequestHeader"in i&&p.forEach(s,function(e,t){void 0===o&&"content-type"===t.toLowerCase()?delete s[t]:i.setRequestHeader(t,e)}),f.withCredentials&&(i.withCredentials=!0),f.responseType)try{i.responseType=f.responseType}catch(e){if("json"!==f.responseType)throw e}"function"==typeof f.onDownloadProgress&&i.addEventListener("progress",f.onDownloadProgress),"function"==typeof f.onUploadProgress&&i.upload&&i.upload.addEventListener("progress",f.onUploadProgress),f.cancelToken&&f.cancelToken.promise.then(function(e){i&&(i.abort(),r(e),i=null)}),void 0===o&&(o=null),i.send(o)})}},"./node_modules/axios/lib/axios.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js"),o=n("./node_modules/axios/lib/helpers/bind.js"),s=n("./node_modules/axios/lib/core/Axios.js"),i=n("./node_modules/axios/lib/defaults.js");function a(e){var t=new s(e),n=o(s.prototype.request,t);return r.extend(n,s.prototype,t),r.extend(n,t),n}var u=a(i);u.Axios=s,u.create=function(e){return a(r.merge(i,e))},u.Cancel=n("./node_modules/axios/lib/cancel/Cancel.js"),u.CancelToken=n("./node_modules/axios/lib/cancel/CancelToken.js"),u.isCancel=n("./node_modules/axios/lib/cancel/isCancel.js"),u.all=function(e){return Promise.all(e)},u.spread=n("./node_modules/axios/lib/helpers/spread.js"),e.exports=u,e.exports.default=u},"./node_modules/axios/lib/cancel/Cancel.js":function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},"./node_modules/axios/lib/cancel/CancelToken.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/cancel/Cancel.js");function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o(function(e){t=e}),cancel:t}},e.exports=o},"./node_modules/axios/lib/cancel/isCancel.js":function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},"./node_modules/axios/lib/core/Axios.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/defaults.js"),o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/core/InterceptorManager.js"),i=n("./node_modules/axios/lib/core/dispatchRequest.js");function a(e){this.defaults=e,this.interceptors={request:new s,response:new s}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(n){a.prototype[n]=function(e,t){return this.request(o.merge(t||{},{method:n,url:e}))}}),o.forEach(["post","put","patch"],function(r){a.prototype[r]=function(e,t,n){return this.request(o.merge(n||{},{method:r,url:e,data:t}))}}),e.exports=a},"./node_modules/axios/lib/core/InterceptorManager.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},e.exports=o},"./node_modules/axios/lib/core/createError.js":function(e,t,n){"use strict";var i=n("./node_modules/axios/lib/core/enhanceError.js");e.exports=function(e,t,n,r,o){var s=new Error(e);return i(s,t,n,r,o)}},"./node_modules/axios/lib/core/dispatchRequest.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js"),o=n("./node_modules/axios/lib/core/transformData.js"),s=n("./node_modules/axios/lib/cancel/isCancel.js"),i=n("./node_modules/axios/lib/defaults.js"),a=n("./node_modules/axios/lib/helpers/isAbsoluteURL.js"),u=n("./node_modules/axios/lib/helpers/combineURLs.js");function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(t){return c(t),t.baseURL&&!a(t.url)&&(t.url=u(t.baseURL,t.url)),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||i.adapter)(t).then(function(e){return c(t),e.data=o(e.data,e.headers,t.transformResponse),e},function(e){return s(e)||(c(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},"./node_modules/axios/lib/core/enhanceError.js":function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},"./node_modules/axios/lib/core/settle.js":function(e,t,n){"use strict";var o=n("./node_modules/axios/lib/core/createError.js");e.exports=function(e,t,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(o("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},"./node_modules/axios/lib/core/transformData.js":function(e,t,n){"use strict";var r=n("./node_modules/axios/lib/utils.js");e.exports=function(t,n,e){return r.forEach(e,function(e){t=e(t,n)}),t}},"./node_modules/axios/lib/defaults.js":function(a,e,u){"use strict";(function(e){var n=u("./node_modules/axios/lib/utils.js"),r=u("./node_modules/axios/lib/helpers/normalizeHeaderName.js"),t={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,i={adapter:("undefined"!=typeof XMLHttpRequest?s=u("./node_modules/axios/lib/adapters/xhr.js"):void 0!==e&&(s=u("./node_modules/axios/lib/adapters/xhr.js")),s),transformRequest:[function(e,t){return r(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return 200<=e&&e<300}};i.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){i.headers[e]={}}),n.forEach(["post","put","patch"],function(e){i.headers[e]=n.merge(t)}),a.exports=i}).call(this,u("./node_modules/process/browser.js"))},"./node_modules/axios/lib/helpers/bind.js":function(e,t,n){"use strict";e.exports=function(n,r){return function(){for(var e=new Array(arguments.length),t=0;t<e.length;t++)e[t]=arguments[t];return n.apply(r,e)}}},"./node_modules/axios/lib/helpers/btoa.js":function(e,t,n){"use strict";function a(){this.message="String contains an invalid character"}(a.prototype=new Error).code=5,a.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,r=String(e),o="",s=0,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.charAt(0|s)||(i="=",s%1);o+=i.charAt(63&t>>8-s%1*8)){if(255<(n=r.charCodeAt(s+=.75)))throw new a;t=t<<8|n}return o}},"./node_modules/axios/lib/helpers/buildURL.js":function(e,t,n){"use strict";var s=n("./node_modules/axios/lib/utils.js");function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var r;if(n)r=n(t);else if(s.isURLSearchParams(t))r=t.toString();else{var o=[];s.forEach(t,function(e,t){null!=e&&(s.isArray(e)?t+="[]":e=[e],s.forEach(e,function(e){s.isDate(e)?e=e.toISOString():s.isObject(e)&&(e=JSON.stringify(e)),o.push(i(t)+"="+i(e))}))}),r=o.join("&")}return r&&(e+=(-1===e.indexOf("?")?"?":"&")+r),e}},"./node_modules/axios/lib/helpers/combineURLs.js":function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},"./node_modules/axios/lib/helpers/cookies.js":function(e,t,n){"use strict";var a=n("./node_modules/axios/lib/utils.js");e.exports=a.isStandardBrowserEnv()?{write:function(e,t,n,r,o,s){var i=[];i.push(e+"="+encodeURIComponent(t)),a.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),a.isString(r)&&i.push("path="+r),a.isString(o)&&i.push("domain="+o),!0===s&&i.push("secure"),document.cookie=i.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},"./node_modules/axios/lib/helpers/isAbsoluteURL.js":function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},"./node_modules/axios/lib/helpers/isURLSameOrigin.js":function(e,t,n){"use strict";var i=n("./node_modules/axios/lib/utils.js");e.exports=i.isStandardBrowserEnv()?function(){var n,r=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");function s(e){var t=e;return r&&(o.setAttribute("href",t),t=o.href),o.setAttribute("href",t),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}return n=s(window.location.href),function(e){var t=i.isString(e)?s(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0}},"./node_modules/axios/lib/helpers/normalizeHeaderName.js":function(e,t,n){"use strict";var o=n("./node_modules/axios/lib/utils.js");e.exports=function(n,r){o.forEach(n,function(e,t){t!==r&&t.toUpperCase()===r.toUpperCase()&&(n[r]=e,delete n[t])})}},"./node_modules/axios/lib/helpers/parseHeaders.js":function(e,t,n){"use strict";var s=n("./node_modules/axios/lib/utils.js"),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,r,o={};return e&&s.forEach(e.split("\n"),function(e){if(r=e.indexOf(":"),t=s.trim(e.substr(0,r)).toLowerCase(),n=s.trim(e.substr(r+1)),t){if(o[t]&&0<=i.indexOf(t))return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([n]):o[t]?o[t]+", "+n:n}}),o}},"./node_modules/axios/lib/helpers/spread.js":function(e,t,n){"use strict";e.exports=function(t){return function(e){return t.apply(null,e)}}},"./node_modules/axios/lib/utils.js":function(e,t,n){"use strict";var o=n("./node_modules/axios/lib/helpers/bind.js"),r=n("./node_modules/is-buffer/index.js"),s=Object.prototype.toString;function i(e){return"[object Array]"===s.call(e)}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===s.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:r,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function n(){var r={};function e(e,t){"object"==typeof r[t]&&"object"==typeof e?r[t]=n(r[t],e):r[t]=e}for(var t=0,o=arguments.length;t<o;t++)c(arguments[t],e);return r},extend:function(n,e,r){return c(e,function(e,t){n[t]=r&&"function"==typeof e?o(e,r):e}),n},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},"./node_modules/is-buffer/index.js":function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(n(e)||"function"==typeof(t=e).readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))||!!e._isBuffer);var t}},"./node_modules/process/browser.js":function(e,t){var n,r,o=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=a(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(1<arguments.length)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"./src/js/app.js":function(e,t,n){"use strict";n.r(t);var r=n("./src/js/models/Search.js"),o=n("./src/js/views/searchView.js"),s=n("./src/js/views/base.js");function u(e,t,n,r,o,s,i){try{var a=e[s](i),u=a.value}catch(e){return void n(e)}a.done?t(u):Promise.resolve(u).then(r,o)}var i={},a=function(){var a,e=(a=regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=o.getInput(),i.search=new r.default(t),o.clearInput(),o.clearResults(),Object(s.renderLoader)(s.elements.searchResults),e.next=7,i.search.getResults();case 7:Object(s.clearLoader)(),o.renderResults(i.search.result);case 9:case"end":return e.stop()}},e,this)}),function(){var e=this,i=arguments;return new Promise(function(t,n){var r=a.apply(e,i);function o(e){u(r,t,n,o,s,"next",e)}function s(e){u(r,t,n,o,s,"throw",e)}o(void 0)})});return function(){return e.apply(this,arguments)}}();s.elements.searchForm.addEventListener("submit",function(e){e.preventDefault(),a()})},"./src/js/models/Search.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return o});var r=n("./node_modules/axios/index.js"),s=n.n(r);function u(e,t,n,r,o,s,i){try{var a=e[s](i),u=a.value}catch(e){return void n(e)}a.done?t(u):Promise.resolve(u).then(r,o)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.query=e}var e,n,r,a,o;return e=t,(n=[{key:"getResults",value:(a=regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return"https://cors-anywhere.herokuapp.com/","2a95efc2bb6173de7201f31f9b18a2a9",e.prev=2,e.next=5,s()("".concat("https://cors-anywhere.herokuapp.com/","https://www.food2fork.com/api/search?key=").concat("2a95efc2bb6173de7201f31f9b18a2a9","&q=").concat(this.query));case 5:t=e.sent,this.result=t.data.recipes,e.next=12;break;case 9:e.prev=9,e.t0=e.catch(2),console.log(e.t0);case 12:case"end":return e.stop()}},e,this,[[2,9]])}),o=function(){var e=this,i=arguments;return new Promise(function(t,n){var r=a.apply(e,i);function o(e){u(r,t,n,o,s,"next",e)}function s(e){u(r,t,n,o,s,"throw",e)}o(void 0)})},function(){return o.apply(this,arguments)})}])&&i(e.prototype,n),r&&i(e,r),t}()},"./src/js/views/base.js":function(e,t,n){"use strict";n.r(t),n.d(t,"elements",function(){return r}),n.d(t,"elementStrings",function(){return o}),n.d(t,"renderLoader",function(){return s}),n.d(t,"clearLoader",function(){return i});var r={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search_input"),searchResList:document.querySelector(".results_list"),searchResults:document.querySelector(".results"),recipe:document.querySelector(".recipe")},o={loader:"loader"},s=function(e){var t='\n        <div class="'.concat(o.loader,'">\n            <svg class="icon icon-cw">\n                <use xlink:href="img/sprite.svg#icon-cw"/>\n            </svg>\n        </div>\n    ');e.insertAdjacentHTML("afterbegin",t)},i=function(){var e=document.querySelector(".".concat(o.loader));e&&e.parentElement.removeChild(e)}},"./src/js/views/searchView.js":function(e,t,n){"use strict";n.r(t),n.d(t,"getInput",function(){return o}),n.d(t,"clearInput",function(){return s}),n.d(t,"clearResults",function(){return i}),n.d(t,"renderResults",function(){return u});var r=n("./src/js/views/base.js"),o=function(){return r.elements.searchInput.value},s=function(){r.elements.searchInput.value=""},i=function(){r.elements.searchResList.innerHTML=""},a=function(e){var t='\n    <li class="results_list_item">\n        <a class="results_link" href="#'.concat(e.recipe_id,'">\n            <figure class="results_fig">\n                <img src=').concat(e.image_url,' alt="').concat(e.title,'">\n            </figure>\n            <div class="results_data">\n                <h4 class="results_name">').concat(function(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:17,r=[];return e.length>n?(e.split(" ").reduce(function(e,t){return e+t.length<=n&&r.push(t),e+t.length},0),"".concat(r.join(" ")," ...")):e}(e.title),'</h4>\n                <p class="results_author">').concat(e.publisher,"</p>\n            </div>\n        </a>\n    </li>\n    ");r.elements.searchResList.insertAdjacentHTML("beforeend",t)},u=function(e){console.log(e),e.forEach(a)}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
