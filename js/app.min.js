!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=29)}([function(e,t,n){"use strict";var r=n(4),i=n(12),o=Object.prototype.toString;function s(e){return"[object Array]"===o.call(e)}function a(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===o.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return a(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){e.exports=n(11)},function(e,t,n){"use strict";(function(t){var r=n(0),i=n(14),o={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,c={adapter:("undefined"!=typeof XMLHttpRequest?a=n(6):void 0!==t&&(a=n(6)),a),transformRequest:[function(e,t){return i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){c.headers[e]={}}),r.forEach(["post","put","patch"],function(e){c.headers[e]=r.merge(o)}),e.exports=c}).call(this,n(5))},function(e,t){var n,r;Fraction=function(e,t){if(void 0!==e&&t)"number"==typeof e&&"number"==typeof t?(this.numerator=e,this.denominator=t):"string"==typeof e&&"string"==typeof t&&(this.numerator=parseInt(e),this.denominator=parseInt(t));else if(void 0===t)if(num=e,"number"==typeof num)this.numerator=num,this.denominator=1;else if("string"==typeof num){var n,r,i=num.split(" ");if(i[0]&&(n=i[0]),i[1]&&(r=i[1]),n%1==0&&r&&r.match("/"))return new Fraction(n).add(new Fraction(r));if(!n||r)return;if("string"==typeof n&&n.match("/")){var o=n.split("/");this.numerator=o[0],this.denominator=o[1]}else{if("string"==typeof n&&n.match("."))return new Fraction(parseFloat(n));this.numerator=parseInt(n),this.denominator=1}}this.normalize()},Fraction.prototype.clone=function(){return new Fraction(this.numerator,this.denominator)},Fraction.prototype.toString=function(){if("NaN"===this.denominator)return"NaN";var e=this.numerator/this.denominator>0?Math.floor(this.numerator/this.denominator):Math.ceil(this.numerator/this.denominator),t=this.numerator%this.denominator,n=this.denominator,r=[];return 0!=e&&r.push(e),0!=t&&r.push((0===e?t:Math.abs(t))+"/"+n),r.length>0?r.join(" "):0},Fraction.prototype.rescale=function(e){return this.numerator*=e,this.denominator*=e,this},Fraction.prototype.add=function(e){var t=this.clone();return e=e instanceof Fraction?e.clone():new Fraction(e),td=t.denominator,t.rescale(e.denominator),e.rescale(td),t.numerator+=e.numerator,t.normalize()},Fraction.prototype.subtract=function(e){var t=this.clone();return e=e instanceof Fraction?e.clone():new Fraction(e),td=t.denominator,t.rescale(e.denominator),e.rescale(td),t.numerator-=e.numerator,t.normalize()},Fraction.prototype.multiply=function(e){var t=this.clone();if(e instanceof Fraction)t.numerator*=e.numerator,t.denominator*=e.denominator;else{if("number"!=typeof e)return t.multiply(new Fraction(e));t.numerator*=e}return t.normalize()},Fraction.prototype.divide=function(e){var t=this.clone();if(e instanceof Fraction)t.numerator*=e.denominator,t.denominator*=e.numerator;else{if("number"!=typeof e)return t.divide(new Fraction(e));t.denominator*=e}return t.normalize()},Fraction.prototype.equals=function(e){e instanceof Fraction||(e=new Fraction(e));var t=this.clone().normalize();e=e.clone().normalize();return t.numerator===e.numerator&&t.denominator===e.denominator},Fraction.prototype.normalize=(n=function(e){return"number"==typeof e&&(e>0&&e%1>0&&e%1<1||e<0&&e%-1<0&&e%-1>-1)},r=function(e,t){if(t){var n=Math.pow(10,t);return Math.round(e*n)/n}return Math.round(e)},function(){if(n(this.denominator)){var e=r(this.denominator,9),t=Math.pow(10,e.toString().split(".")[1].length);this.denominator=Math.round(this.denominator*t),this.numerator*=t}n(this.numerator)&&(e=r(this.numerator,9),t=Math.pow(10,e.toString().split(".")[1].length),this.numerator=Math.round(this.numerator*t),this.denominator*=t);var i=Fraction.gcf(this.numerator,this.denominator);return this.numerator/=i,this.denominator/=i,(this.numerator<0&&this.denominator<0||this.numerator>0&&this.denominator<0)&&(this.numerator*=-1,this.denominator*=-1),this}),Fraction.gcf=function(e,t){var n=[],r=Fraction.primeFactors(e),i=Fraction.primeFactors(t);return r.forEach(function(e){var t=i.indexOf(e);t>=0&&(n.push(e),i.splice(t,1))}),0===n.length?1:function(){var e,t=n[0];for(e=1;e<n.length;e++)t*=n[e];return t}()},Fraction.primeFactors=function(e){for(var t=Math.abs(e),n=[],r=2;r*r<=t;)t%r==0?(n.push(r),t/=r):r++;return 1!=t&&n.push(t),n},e.exports.Fraction=Fraction},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,u=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&d())}function d(){if(!l){var e=a(p);l=!0;for(var t=u.length;t;){for(c=u,u=[];++f<t;)c&&c[f].run();f=-1,t=u.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0),i=n(15),o=n(17),s=n(18),a=n(19),c=n(7),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(20);e.exports=function(e){return new Promise(function(t,l){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(e.url)||(d=new window.XDomainRequest,h="onload",m=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var v=e.auth.username||"",g=e.auth.password||"";p.Authorization="Basic "+u(v+":"+g)}if(d.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||m)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};i(t,l,r),d=null}},d.onerror=function(){l(c("Network Error",e,null,d)),d=null},d.ontimeout=function(){l(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var y=n(21),k=(e.withCredentials||a(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;k&&(p[e.xsrfHeaderName]=k)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),l(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,t,n){"use strict";var r=n(16);e.exports=function(e,t,n,i,o){var s=new Error(e);return r(s,t,n,i,o)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){(function(t){var n=t&&t.pid?t.pid.toString(36):"";function r(){var e=Date.now(),t=r.last||e;return r.last=e>t?e:t+1}e.exports=e.exports.default=function(e){return(e||"")+""+n+r().toString(36)},e.exports.process=function(e){return(e||"")+n+r().toString(36)},e.exports.time=function(e){return(e||"")+r().toString(36)}}).call(this,n(5))},function(e,t,n){"use strict";var r=n(0),i=n(4),o=n(13),s=n(2);function a(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var c=a(s);c.Axios=o,c.create=function(e){return a(r.merge(s,e))},c.Cancel=n(9),c.CancelToken=n(27),c.isCancel=n(8),c.all=function(e){return Promise.all(e)},c.spread=n(28),e.exports=c,e.exports.default=c},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(2),i=n(0),o=n(22),s=n(23);function a(e){this.defaults=e,this.interceptors={request:new o,response:new o}}a.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},i.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(i.merge(n||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(i.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e}},function(e,t,n){"use strict";var r=n(0);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))}))}),o=s.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,n){"use strict";var r=n(0),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&i.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),s="",a=0,c=r;o.charAt(0|a)||(c="=",a%1);s+=c.charAt(63&t>>8-a%1*8)){if((n=o.charCodeAt(a+=.75))>255)throw new i;t=t<<8|n}return s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,n){"use strict";var r=n(0),i=n(24),o=n(8),s=n(2),a=n(25),c=n(26);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!a(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return u(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(u(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(9);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i(function(t){e=t}),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n.n(r),o="?key=34fd73875eea4b22c4d020f02e967e51",s="https://www.food2fork.com/api/",a="get",c="search";function u(e,t,n,r,i,o,s){try{var a=e[o](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.query=t}var t,n,r;return t=e,(n=[{key:"getResults",value:function(){var e,t=(e=regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,i()("".concat(s).concat(c).concat(o,"&q=").concat(this.query));case 3:t=e.sent,this.result=t.data.recipes,console.log(t),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),console.log(e.t0);case 11:case"end":return e.stop()}},e,this,[[0,8]])}),function(){var t=this,n=arguments;return new Promise(function(r,i){var o=e.apply(t,n);function s(e){u(o,r,i,s,a,"next",e)}function a(e){u(o,r,i,s,a,"throw",e)}s(void 0)})});return function(){return t.apply(this,arguments)}}()}])&&l(t.prototype,n),r&&l(t,r),e}();function p(e,t,n,r,i,o,s){try{var a=e[o](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t}var t,n,r;return t=e,(n=[{key:"getRecipe",value:function(){var e,t=(e=regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=17;break}return e.prev=1,e.next=4,i()("".concat(s).concat(a).concat(o,"&rId=").concat(this.id));case 4:n=e.sent,this.img=n.data.recipe.image_url,this.ingredients=n.data.recipe.ingredients,this.publisher=n.data.recipe.publisher,this.title=n.data.recipe.title,this.source_url=n.data.recipe.source_url,e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),console.log("Something wrong... =(");case 15:e.next=23;break;case 17:this.img=t.img,this.ingredients=t.ingredients,this.publisher=t.publisher,this.title=t.title,this.source_url=t.source_url,t.shopList&&(this.shopList=t.shopList);case 23:case"end":return e.stop()}},e,this,[[1,12]])}),function(){var t=this,n=arguments;return new Promise(function(r,i){var o=e.apply(t,n);function s(e){p(o,r,i,s,a,"next",e)}function a(e){p(o,r,i,s,a,"throw",e)}s(void 0)})});return function(e){return t.apply(this,arguments)}}()},{key:"calcTime",value:function(){var e=this.ingredients.length/3;this.time=15*e}},{key:"calcServings",value:function(){this.servings=4}},{key:"updateServings",value:function(e){var t=this,n="add"===e?this.servings+1:this.servings-1;this.ingredients.forEach(function(e){e.count*=n/t.servings}),this.servings=n}},{key:"parseIngredients",value:function(){var e=["tablespoons","tablespoon","cups","ounces","ounce","teaspoons","teaspoon","pounds"],t=["tbsp","tbsp","cup","oc","oc","tsp","tsp","pound"],n=[].concat(t,["kg","g"]),r=this.ingredients.map(function(r){var i=r.toLowerCase();e.forEach(function(e,n){i=i.replace(e,t[n])});var o,s=(i=(i=i.replace(/ *\([^)]*\) */g," ").trim()).replace("-"," ")).split(" "),a=s.findIndex(function(e){return n.includes(e)});if(a>-1){var c=s.slice(0,a);if(0!==c.length)o={count:(c=c.map(function(e){if(e.includes("/")){var t=e.split("/"),n=parseInt(t[0],10),r=parseInt(t[1],10);return parseFloat((n/r).toFixed(2))}return parseInt(e,10)})).reduce(function(e,t){return e+t},0),unit:s[a],ingredient:s.slice(a+1).join(" ")};else o={count:1,unit:s[a],ingredient:s.slice(a+1).join(" ")}}else parseInt(s[0],10)?o={count:parseInt(s[0],10),unit:"",ingredient:s.slice(1).join(" ")}:-1===a&&(o={count:1,unit:"",ingredient:i});return o});this.ingredients=r}}])&&d(t.prototype,n),r&&d(t,r),e}(),m=n(10),v=n.n(m);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=[]}var t,n,r;return t=e,(n=[{key:"addItem",value:function(e,t,n){var r={id:v()(),count:e,unit:t,ingredient:n};return this.items.push(r),r}},{key:"removeItem",value:function(e){var t=this.items.findIndex(function(t){return t.id===e});this.items.splice(t,1)}},{key:"updateCount",value:function(e,t){this.items.find(function(t){return t.id===e}).count=t}}])&&g(t.prototype,n),r&&g(t,r),e}();function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.likes=[]}var t,n,r;return t=e,(n=[{key:"addLike",value:function(e){var t={id:e.id,title:e.title,publisher:e.publisher,img:e.img,ingredients:e.ingredients,source_url:e.source_url};return this.likes.push(t),this.persistData(),t}},{key:"removeLike",value:function(e){var t=this.likes.findIndex(function(t){return t.id===e});this.likes.splice(t,1),this.persistData()}},{key:"isLiked",value:function(e){return-1!==this.likes.findIndex(function(t){return t.id===e})}},{key:"getLiked",value:function(e){return this.likes.find(function(t){return t.id===e})}},{key:"getNumLikes",value:function(){return this.likes.length}},{key:"persistData",value:function(){localStorage.setItem("likes",JSON.stringify(this.likes))}},{key:"getpersistData",value:function(){var e=JSON.parse(localStorage.getItem("likes"));e&&(this.likes=e)}},{key:"removeLikedRecipes",value:function(){this.likes=[],localStorage.removeItem("likes")}}])&&k(t.prototype,n),r&&k(t,r),e}(),w={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search_input"),searchResList:document.querySelector(".results_list"),forkifyList:document.querySelector(".forkify_list"),searchResults:document.querySelector(".results"),resultsPages:document.querySelector(".results_pages"),recipeElem:document.querySelector(".recipe"),recipeCount:document.querySelector(".recipe_count"),shoppingList:document.querySelector(".shopping_list"),likePannel:document.querySelector(".likes"),likesList:document.querySelector(".likes_list"),removeRecipeBtn:document.querySelector(".btn_remove"),saveShopListBtn:document.querySelector(".btn_shop")},_="loader",x="hide",L="forkify_link-active",S={btnClass:"results_btn-next",svgIcon:"icon-triangle-right"},E={btnClass:"results_btn-prev",svgIcon:"icon-triangle-left"},T="forkify_link",R="recipe_count",F="recipe_serving_count",j="shopping_item",C="ingredient_data_amount",I="btn_like",q="icon-heart",A="icon-heart-outlined",N=function(e){var t='\n        <div class="'.concat(_,'">\n            <svg class="icon icon-cw">\n                <use xlink:href="img/sprite.svg#icon-cw"/>\n            </svg>\n        </div>\n    ');e.insertAdjacentHTML("afterbegin",t)},P=function(){var e=document.querySelector(".".concat(_));e&&e.parentElement.removeChild(e)},B=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:17,n=[];return e.length>t?(e.split(" ").reduce(function(e,r){return e+r.length<=t&&n.push(r),e+r.length},0),"".concat(n.join(" ")," ...")):e},O=function(){w.searchResList.innerHTML="",w.resultsPages.innerHTML=""},M=function(e){var t=Array.from(document.querySelectorAll(".".concat(T))),n=Array.from(document.querySelectorAll(".".concat(T,'[href*="').concat(e,'"]')));t.forEach(function(e){return e.classList.remove("".concat(L))}),n.forEach(function(e){return e.classList.add("".concat(L))})},D=function(e){var t='\n    <li class="forkify_list_item">\n        <a class="forkify_link" href="#'.concat(e.recipe_id,'" data-id="').concat(e.recipe_id,'">\n            <figure class="forkify_fig">\n                <img src=').concat(e.image_url,' alt="').concat(e.title,'">\n            </figure>\n            <div class="forkify_data">\n                <h4 class="forkify_name" title="').concat(e.title,'">').concat(B(e.title),'</h4>\n                <p class="forkify_author" title="').concat(e.publisher,'">').concat(e.publisher,"</p>\n            </div>\n        </a>\n    </li>\n    ");w.searchResList.insertAdjacentHTML("beforeend",t)},U=function(e,t){return'\n    <button class="btn btn_pagination btn_inline bg-gray btn-round '.concat(t.btnClass,'" data-page="').concat(e,'">\n        <span class="btn_text">Page ').concat(e,'</span>\n        <svg class="icon ').concat(t.svgIcon,'">\n            <use href="img/sprite.svg#').concat(t.svgIcon,'"></use>\n        </svg>\n    </button>\n    ')},H=function(e,t,n){return'\n    <div class="results_pages_amout bg-gray">\n        <span class="results_pages_current">'.concat(e*t,'</span>\n        <span class="results_pages_separator">/</span>\n        <span class="results_pages_total">').concat(n,"</span>\n    </div>")},z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,r=(t-1)*n,i=t*n;e.slice(r,i).forEach(D),function(e,t,n){var r,i=Math.ceil(t/n);i>=1&&(1===e?r="\n                ".concat(U(e+1,S),"\n                ").concat(H(e,n,t),"\n            "):e>1&&e<i?r="\n                ".concat(U(e-1,E),"\n                ").concat(U(e+1,S),"\n                ").concat(H(e,n,t),"\n            "):e===i&&(r="\n                ".concat(U(e-1,E),"\n                ").concat(H(e,n,t),"\n            "))),w.resultsPages.insertAdjacentHTML("beforeend",r)}(t,e.length,n)},X=n(3);function J(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var G=function(e){if(e){var t=J((Math.round(100*e)/100).toString().split(".").map(function(e){return parseInt(e,10)}),2),n=t[0];if(!t[1])return e;if(0===n){var r=new X.Fraction(e);return"".concat(r.numerator,"/").concat(r.denominator)}var i=new X.Fraction(e-n);return"".concat(n," ").concat(i.numerator,"/").concat(i.denominator)}return"?"},V=function(e,t){var n='\n        \x3c!-- BEGIN recipe --\x3e\n        <div class="recipe bg-gray">\n            '.concat(function(e){return'<figure class="recipe_view">\n                <img src="'.concat(e.img,'" alt="').concat(e.title,'">\n                <h2 class="recipe_title skewed"><span class="grad-orange">').concat(e.title,"</span></h2>\n            </figure>\n            ")}(e),"\n            ").concat(function(e,t){return'<div class="recipe_details">\n                <div class="recipe_info recipe_time">\n                    <svg class="icon icon-stopwatch">\n                        <use xlink:href="img/sprite.svg#icon-stopwatch"/>\n                    </svg>\n                    <span class="recipe_info_data recipe_time_minutes">'.concat(e.time,'</span>\n                    <span class="recipe_time_text">minutes</span>\n                </div>\n                <div class="recipe_info recipe_serving">\n                    <svg class="icon icon-man">\n                        <use xlink:href="img/sprite.svg#icon-man"/>\n                    </svg>\n                    <span class="recipe_info_data recipe_serving_count">').concat(e.servings,'</span>\n                    <span class="recipe_serving_text">serving</span>\n                    <div class="recipe_serving_buttons">\n                        <button class="btn_adjust btn_inline" data-type="reduce">\n                            <svg class="icon icon-circle-minus">\n                                <use xlink:href="img/sprite.svg#icon-circle-minus"/>\n                            </svg>\n                        </button>\n                        <button class="btn_adjust btn_inline" data-type="add">\n                            <svg class="icon icon-circle-plus">\n                                <use xlink:href="img/sprite.svg#icon-circle-plus"/>\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n                <button class="btn btn_like btn_inline grad-orange scaled">\n                    <svg class="icon ').concat(t?q:A,'">\n                        <use xlink:href="img/sprite.svg#').concat(t?q:A,'"/>\n                    </svg>\n                </button>\n            </div>\n            ')}(e,t),'\n            \x3c!-- BEGIN recipe_ingredients --\x3e\n            <div class="recipe_ingredients">\n                <ul class="recipe_ingredients_list">\n                ').concat(function(e){var t="";return e.ingredients.forEach(function(e){t+='\n        <li class="recipe_ingredients_item">\n            <svg class="icon icon-check">\n                <use xlink:href="img/sprite.svg#icon-check"/>\n            </svg>\n            <div class="recipe_ingredient">\n                <span class="recipe_count">'.concat(G(e.count),'</span>\n                <span class="recipe_ingredient_unit">').concat(e.unit,'</span>\n                <span class="recipe_ingredient_name">').concat(e.ingredient,"</span>\n            </div>\n        </li>\n        ")}),t}(e),'\n                </ul>\n                <button class="btn btn_shopping grad-orange scaled">\n                    <svg class="icon icon-shopping-cart">\n                        <use xlink:href="img/sprite.svg#icon-shopping-cart"/>\n                    </svg>\n                    <span>add to shopping list</span>\n                </button>\n            </div>\n            \x3c!-- END recipe_ingredients --\x3e\n            ').concat(function(e){return'\x3c!-- BEGIN recipe_directions --\x3e\n    <div class="recipe_directions">\n        <h3 class="recipe_directions_title">how to cook it</h3>\n        <p class="recipe_directions_text">This recipe was carefully designed and tested\n            by <span class="recipe_author">'.concat(e.publisher,'</span>.\n        </p>\n        <a href="').concat(e.source_url,'" class="btn btn_directions grad-orange scaled">\n            <span class="button_directions_text">directions</span>\n            <svg class="icon icon-search">\n                <use xlink:href="img/sprite.svg#icon-search"/>\n            </svg>\n        </a>\n    </div>\n    \x3c!-- END recipe_directions --\x3e\n    ')}(e),"\n        </div>\n        \x3c!-- END recipe --\x3e\n        ");w.recipeElem.insertAdjacentHTML("afterbegin",n)},$=function(){w.shoppingList.innerHTML=""},K=function(e){var t='\n        <li class="'.concat(j,'" data-shopid="').concat(e.id,'">\n            <div class="ingredient_data">\n                <input type="number" class="').concat(C,'" min="0" value="').concat(e.count,'" step="').concat(e.count,'" placeholder="0">\n                ').concat(e.unit?'<span class="ingredient_data_unit">'.concat(e.unit,"</span>"):"",'\n            </div>\n            <p class="shopping_descr">\n                ').concat(e.ingredient,'\n            </p>\n            <button class="btn btn_cross btn_inline">\n                <svg class="icon icon-circle-cross">\n                    <use xlink:href="img/sprite.svg#icon-circle-cross"/>\n                </svg>\n            </button>\n        </li>');w.shoppingList.insertAdjacentHTML("beforeend",t)},Q=function(e){e?w.saveShopListBtn.classList.remove("".concat(x)):w.saveShopListBtn.classList.add("".concat(x))},W=function(e){var t=e?q:A,n=document.querySelector(".".concat(I," svg"));n&&(n.classList.toggle("".concat(q)),n.classList.toggle("".concat(A)),document.querySelector(".".concat(I," use")).setAttribute("xlink:href","img/sprite.svg#".concat(t)))},Y=function(e){e>0?w.likePannel.classList.remove("".concat(x)):w.likePannel.classList.add("".concat(x))},Z=function(e){var t='\n        <li class="forkify_list_item likes_item">\n            <a class="forkify_link likes_link" href="#'.concat(e.id,'" data-likeid="').concat(e.id,'">\n                <figure class="forkify_fig likes_fig">\n                    <img src="').concat(e.img,'" alt="Test"/>\n                </figure>\n                <div class="forkify_data likes_data">\n                    <h4 class="forkify_name likes_name" title="').concat(e.title,'">').concat(B(e.title),'</h4>\n                    <p class="forkify_author likes_author">').concat(e.publisher,"</p>\n                </div>\n            </a>\n        </li>");w.likesList.insertAdjacentHTML("beforeend",t)},ee=function(e){e>0?w.removeRecipeBtn.classList.remove("".concat(x)):w.removeRecipeBtn.classList.add("".concat(x))};function te(e,t,n,r,i,o,s){try{var a=e[o](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(r,i)}function ne(e){return function(){var t=this,n=arguments;return new Promise(function(r,i){var o=e.apply(t,n);function s(e){te(o,r,i,s,a,"next",e)}function a(e){te(o,r,i,s,a,"throw",e)}s(void 0)})}}var re={},ie=function(){var e=ne(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=w.searchInput.value,re.search=new f(t),w.searchInput.value="",O(),N(w.searchResults),e.next=7,re.search.getResults();case 7:P(),z(re.search.result),M(re.windowId);case 10:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}();w.searchForm.addEventListener("submit",function(e){e.preventDefault(),ie()}),w.searchResults.addEventListener("click",function(e){var t=e.target.closest(".btn");if(t){var n=+t.dataset.page;O(),z(re.search.result,n)}});var oe=function(){re.like||(re.like=new b);var e,t,n,r=re.recipe.id;re.like.isLiked(r)?(W(!1),re.like.removeLike(r),ee(re.like.getNumLikes()),t=r,(n=document.querySelector(".".concat(w.likesList,' a[data-likeid="').concat(t,'"]')))&&n.parentElement.removeChild(n)):(e=re.like.addLike(re.recipe),W(!0),ee(re.like.getNumLikes()),Z(e)),Y(re.like.getNumLikes())},se=function(){re.like||(re.like=new b),re.like.getpersistData(),Y(re.like.getNumLikes()),re.like.getNumLikes()>0&&re.like.likes.forEach(function(e){return Z(e)}),ee(re.like.getNumLikes())};w.removeRecipeBtn.addEventListener("click",function(){w.likesList.innerHTML="",re.like.removeLikedRecipes(),ee(re.like.getNumLikes()),Y(re.like.getNumLikes()),W(re.like.isLiked()),Q(!1),$()});var ae=function(){var e=ne(regeneratorRuntime.mark(function e(t){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(re.windowId=window.location.hash.replace("#",""),!re.windowId){e.next=31;break}if(re.recipe=new h(re.windowId),e.prev=3,w.recipeElem.innerHTML="",N(w.recipeElem),$(),"load"===t.type&&se(),n=re.like.isLiked(re.windowId),!re.like||!n){e.next=15;break}return e.next=12,re.recipe.getRecipe(re.like.getLiked(re.windowId));case 12:re.recipe.shopList?(re.recipe.shopList.forEach(function(e){return K(e)}),Q(!0)):Q(!1),e.next=18;break;case 15:return e.next=17,re.recipe.getRecipe();case 17:re.recipe.parseIngredients();case 18:re.recipe.calcServings(),re.recipe.calcTime(),re.recipe.shopList&&Q(n),n?(W(n),V(re.recipe,n)):(V(re.recipe,n),Q(n)),(re.search||re.like)&&M(re.windowId),P(),e.next=29;break;case 26:e.prev=26,e.t0=e.catch(3),console.log(e.t0);case 29:e.next=33;break;case 31:se(),console.log(localStorage);case 33:case"end":return e.stop()}},e,this,[[3,26]])}));return function(t){return e.apply(this,arguments)}}();["hashchange","load"].forEach(function(e){return window.addEventListener(e,function(e){return ae(e)})}),w.shoppingList.addEventListener("click",function(e){var t,n=e.target.closest(".".concat(j));if(n&&(t=n.dataset.shopid),e.target.matches(".btn_cross, .btn_cross *"))re.shopList.removeItem(t),function(e){var t=document.querySelector("[data-shopid=".concat(e,"]"));t&&t.parentElement.removeChild(t)}(t);else if(e.target.matches(".".concat(C))){var r=parseFloat(e.target.value,10);re.shopList.updateCount(t,r)}});w.saveShopListBtn.addEventListener("click",function(){re.like.isLiked(re.windowId)?(re.like.getLiked(re.windowId).shopList=re.shopList.items,re.like.persistData(),alert("Success")):alert("Recipe is not saved! Please like it before save shop list!")}),w.recipeElem.addEventListener("click",function(e){var t,n,r=e.target;if(r.matches(".btn_adjust, .btn_adjust *")){var i=r.closest(".btn_adjust");(re.recipe.servings>1||"reduce"!==i.dataset.type&&1===re.recipe.servings)&&(re.recipe.updateServings(i.dataset.type),t=re.recipe,(n=document.querySelector(".".concat(F)))&&(n.textContent="".concat(t.servings)),function(e){var t=Array.from(document.querySelectorAll(".".concat(R)));t&&t.forEach(function(t,n){t.textContent="".concat(G(e.ingredients[n].count))})}(re.recipe))}else r.matches(".btn_shopping, .btn_shopping *")?function(e){re.shopList||(re.shopList=new y),$(),e.ingredients.forEach(function(e){var t=re.shopList.addItem(e.count,e.unit,e.ingredient);K(t)}),Q(!0)}(re.recipe):r.matches(".btn_like, .btn_like *")&&oe()})}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
